MODULE TEST_DNLS1Q_PF
  USE service, ONLY : DP
  USE funit
  IMPLICIT NONE

CONTAINS
  @test
  SUBROUTINE DNLS1Q()
    !> Quick check for DNLS1E, DNLS1 and DCOV.
    !***
    ! **Description:**
    !
    !   This subroutine performs a quick check on the subroutines DNLS1E
    !   (and DNLS1) and DCOV.

    USE service, ONLY : eps_dp
    USE approximation, ONLY : DFDJC3, DCOV, DNLS1E
    !     .. Local Scalars ..
    REAL(DP) :: fnorm, fnorms, sigma, temp1, temp2, temp3, tol, tol2
    INTEGER :: i, iflag, info, infos, iopt, ldfjac, lwa, m, n, nprint
    !     .. Local Arrays ..
    REAL(DP) :: fjac(10,2), fjrow(2,1), fjtj(3), fvec(10), wa(40), x(2)
    INTEGER :: iw(2)
    !* FIRST EXECUTABLE STATEMENT  DNLS1Q
    !
    infos = 1
    fnorms = 1.1151779E+01_DP
    m = 10
    n = 2
    lwa = 40
    ldfjac = 10
    nprint = -1
    iflag = 1
    tol = MAX(SQRT(40._DP*eps_dp),1.E-12_DP)
    tol2 = SQRT(tol)
    !
    !  OPTION=2, the full Jacobian is stored and the user provides the Jacobian.
    !
    iopt = 2
    x(1) = 3.0E-1_DP
    x(2) = 4.0E-1_DP
    CALL DNLS1E(DFCN2,iopt,m,n,x,fvec,tol,nprint,info,iw,wa,lwa)
    fnorm = NORM2(fvec)
    @AssertEqual( infos, info )
    @AssertRelativelyEqual( fnorms, fnorm, tol2 )
    !
    !     Form JAC-transpose*JAC.
    !
    sigma = fnorm*fnorm/(m-n)
    iflag = 2
    CALL DFCN2(iflag,m,n,x,fvec,fjac,ldfjac)
    DO i = 1, 3
      fjtj(i) = 0._DP
    END DO
    DO i = 1, m
      fjtj(1) = fjtj(1) + fjac(i,1)**2
      fjtj(2) = fjtj(2) + fjac(i,1)*fjac(i,2)
      fjtj(3) = fjtj(3) + fjac(i,2)**2
    END DO
    !
    !     Calculate the covariance matrix.
    !
    CALL DCOV(DFCN2,iopt,m,n,x,fvec,fjac,ldfjac,info,wa(1),wa(n+1),wa(2*n+1),wa(3*n+1))
    !
    !     Form JAC-transpose*JAC * covariance matrix (should = SIGMA*I).
    !
    temp1 = (fjtj(1)*fjac(1,1)+fjtj(2)*fjac(1,2))/sigma
    temp2 = (fjtj(1)*fjac(1,2)+fjtj(2)*fjac(2,2))/sigma
    temp3 = (fjtj(2)*fjac(1,2)+fjtj(3)*fjac(2,2))/sigma
    @AssertEqual( infos, info )
    @AssertEqual( 1._DP, temp1, tol2 )
    @AssertEqual( 0._DP, temp2, tol2 )
    @AssertEqual( 1._DP, temp3, tol2 )
    !
    !  OPTION=1, the full Jacobian is stored and the code approximates the Jacobian.
    !
    iopt = 1
    x(1) = 3.0E-1_DP
    x(2) = 4.0E-1_DP
    CALL DNLS1E(DFCN1,iopt,m,n,x,fvec,tol,nprint,info,iw,wa,lwa)
    fnorm = NORM2(fvec)
    @AssertEqual( infos, info )
    @AssertRelativelyEqual( fnorms, fnorm, tol2 )
    !
    !     Form JAC-transpose*JAC.
    !
    sigma = fnorm*fnorm/(m-n)
    iflag = 1
    CALL DFDJC3(DFCN1,m,n,x,fvec,fjac,ldfjac,iflag,0._DP,wa)
    DO i = 1, 3
      fjtj(i) = 0._DP
    END DO
    DO i = 1, m
      fjtj(1) = fjtj(1) + fjac(i,1)**2
      fjtj(2) = fjtj(2) + fjac(i,1)*fjac(i,2)
      fjtj(3) = fjtj(3) + fjac(i,2)**2
    END DO
    !
    !     Calculate the covariance matrix.
    !
    CALL DCOV(DFCN1,iopt,m,n,x,fvec,fjac,ldfjac,info,wa(1),wa(n+1),wa(2*n+1),wa(3*n+1))
    !
    !     Form JAC-transpose*JAC * covariance matrix (should = SIGMA*I).
    !
    temp1 = (fjtj(1)*fjac(1,1)+fjtj(2)*fjac(1,2))/sigma
    temp2 = (fjtj(1)*fjac(1,2)+fjtj(2)*fjac(2,2))/sigma
    temp3 = (fjtj(2)*fjac(1,2)+fjtj(3)*fjac(2,2))/sigma
    @AssertEqual( infos, info )
    @AssertEqual( 1._DP, temp1, tol2 )
    @AssertEqual( 0._DP, temp2, tol2 )
    @AssertEqual( 1._DP, temp3, tol2 )
    !
    !  OPTION=3, the full Jacobian is not stored. Only the product of the Jacobian
    !  transpose and Jacobian is stored. The user provides the Jacobian one row at a time.
    !
    iopt = 3
    x(1) = 3.0E-1_DP
    x(2) = 4.0E-1_DP
    CALL DNLS1E(DFCN3,iopt,m,n,x,fvec,tol,nprint,info,iw,wa,lwa)
    fnorm = NORM2(fvec)
    @AssertEqual( infos, info )
    @AssertRelativelyEqual( fnorms, fnorm, tol2 )
    !
    !     Form JAC-transpose*JAC.
    !
    sigma = fnorm*fnorm/(m-n)
    DO i = 1, 3
      fjtj(i) = 0._DP
    END DO
    iflag = 3
    DO i = 1, m
      CALL DFCN3(iflag,m,n,x,fvec,fjrow,i)
      fjtj(1) = fjtj(1) + fjrow(1,1)**2
      fjtj(2) = fjtj(2) + fjrow(1,1)*fjrow(2,1)
      fjtj(3) = fjtj(3) + fjrow(2,1)**2
    END DO
    !
    !     Calculate the covariance matrix.
    !
    CALL DCOV(DFCN3,iopt,m,n,x,fvec,fjac,ldfjac,info,wa(1),wa(n+1),wa(2*n+1),wa(3*n+1))
    !
    !     Form JAC-transpose*JAC * covariance matrix (should = SIGMA*I).
    !
    temp1 = (fjtj(1)*fjac(1,1)+fjtj(2)*fjac(1,2))/sigma
    temp2 = (fjtj(1)*fjac(1,2)+fjtj(2)*fjac(2,2))/sigma
    temp3 = (fjtj(2)*fjac(1,2)+fjtj(3)*fjac(2,2))/sigma
    @AssertEqual( infos, info )
    @AssertEqual( 1._DP, temp1, tol2 )
    @AssertEqual( 0._DP, temp2, tol2 )
    @AssertEqual( 1._DP, temp3, tol2 )
    !
    RETURN
  END SUBROUTINE DNLS1Q
  !** DFCN1
  PURE SUBROUTINE DFCN1(Iflag,M,N,X,Fvec,Fjac,Ldfjac)
    !> Subsidiary to DNLS1Q.
    !***
    ! **Description:**
    !
    !   Subroutine which evaluates the function for test program
    !   used in quick check of DNLS1E.
    !
    !   Numerical approximation of Jacobian is used.

    !     .. Scalar Arguments ..
    INTEGER, INTENT(IN) :: Iflag, Ldfjac, M, N
    !     .. Array Arguments ..
    REAL(DP), INTENT(IN) :: X(N)
    REAL(DP), INTENT(INOUT) :: Fvec(M)
    REAL(DP), INTENT(OUT) :: Fjac(:,:)
    !     .. Local Scalars ..
    INTEGER :: i
    REAL(DP) :: temp
    !* FIRST EXECUTABLE STATEMENT  DFCN1
    IF( Iflag/=1 ) RETURN
    DO i = 1, M
      temp = i
      Fvec(i) = 2._DP + 2._DP*temp - EXP(temp*X(1)) - EXP(temp*X(2))
    END DO
  END SUBROUTINE DFCN1
  !** DFCN2
  PURE SUBROUTINE DFCN2(Iflag,M,N,X,Fvec,Fjac,Ldfjac)
    !> Subsidiary to DNLS1Q.
    !***
    ! **Description:**
    !
    !   Subroutine to evaluate function and full Jacobian for test
    !   problem in quick check of DNLS1E.

    !     .. Scalar Arguments ..
    INTEGER, INTENT(IN) :: Iflag, Ldfjac, M, N
    !     .. Array Arguments ..
    REAL(DP), INTENT(IN) :: X(N)
    REAL(DP), INTENT(INOUT) :: Fvec(M)
    REAL(DP), INTENT(OUT) :: Fjac(:,:)
    !     .. Local Scalars ..
    REAL(DP) :: temp
    INTEGER :: i
    !* FIRST EXECUTABLE STATEMENT  DFCN2
    IF( Iflag==0 ) RETURN
    !
    !     Should we evaluate function or Jacobian?
    !
    IF( Iflag==1 ) THEN
      !
      !       Evaluate functions.
      !
      DO i = 1, M
        temp = i
        Fvec(i) = 2._DP + 2._DP*temp - EXP(temp*X(1)) - EXP(temp*X(2))
      END DO
    ELSE
      !
      !       Evaluate Jacobian.
      !
      IF( Iflag/=2 ) RETURN
      DO i = 1, M
        temp = i
        Fjac(i,1) = -temp*EXP(temp*X(1))
        Fjac(i,2) = -temp*EXP(temp*X(2))
      END DO
    END IF
  END SUBROUTINE DFCN2
  !** DFCN3
  PURE SUBROUTINE DFCN3(Iflag,M,N,X,Fvec,Fjrow,Nrow)
    !> Subsidiary to DNLS1Q.
    !***
    ! **Description:**
    !
    !   Subroutine to evaluate the Jacobian, one row at a time, for
    !   test problem used in quick check of DNLS1E.

    !     .. Scalar Arguments ..
    INTEGER, INTENT(IN) :: Iflag, M, N, Nrow
    !     .. Array Arguments ..
    REAL(DP), INTENT(IN) :: X(N)
    REAL(DP), INTENT(INOUT) :: Fvec(M)
    REAL(DP), INTENT(OUT) :: Fjrow(:,:)
    !     .. Local Scalars ..
    REAL(DP) :: temp
    INTEGER :: i
    !* FIRST EXECUTABLE STATEMENT  DFCN3
    IF( Iflag==0 ) RETURN
    !
    !     Should we evaluate functions or Jacobian?
    !
    IF( Iflag==1 ) THEN
      !
      !       Evaluate functions.
      !
      DO i = 1, M
        temp = i
        Fvec(i) = 2._DP + 2._DP*temp - EXP(temp*X(1)) - EXP(temp*X(2))
      END DO
    ELSE
      !
      !       Evaluate one row of Jacobian.
      !
      IF( Iflag/=3 ) RETURN
      temp = Nrow
      Fjrow(1,1) = -temp*EXP(temp*X(1))
      Fjrow(2,1) = -temp*EXP(temp*X(2))
    END IF
  END SUBROUTINE DFCN3
  !
END MODULE TEST_DNLS1Q_PF